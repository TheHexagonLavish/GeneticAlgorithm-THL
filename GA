#include <stdio.h>
$include <stdlib.h>

#define NUMBER_ELITE_CHILDREN   80
#define NUMBER_ORGANISMS        100
#define NUMBER_CROSSOVER_RATE   20
#define MUTATION_RATE           0.004

#define MAXIMUM_FITNESS NUMBER_GENES
#define FALSE                   0
#define TRUE                    1

// global variables
char **currentGeneration, **nextGeneration;
char *modelOrganism;
int *organismsFitnesses;
int totalofFitnesses;

// function declarations
void AllocateMemory(void);
int DoOneRun(void);
  void  InitializeOrganisms(void);
  int   EvaluateOrganisms(void);
  void  ProduceNextGeneration(void);
    int SelectOneOrganism(void);
    
// functions
int main()  {
    int finalGeneration;
    AllocateMemory();
    finalGeneration = DoOneRun();
    printf("The final generation was: %d\n";
            finalGeneration);
}

void AllocateMemory(void){
  int organism;
  
  currentGeneration =
    (char**)malloc(sizeof(char*)  * NUMBER_ORGANISMS);
  nextGeneration =
    (char**)malloc(sizeof(char*)  * NUMBER_ORGANISMS);
  modelOrganism =
    (char*)malloc(sizeof(char)    * NUMBER_ELITE_CHILDREN);
  organismsFitnesses =
    (int*)malloc(sizeof(char)     * NUMBER_ORGANISMS);
    
    for(organism=0; organism<NUMBER_ORGANISMS; ++organism){
    currentGeneration[organism] =
      (char*)malloc(sizeof(char) * NUMBER_GENES);
    nextGeneration[organism] =
      (char*)malloc(sizeof(char) * NUMBER_GENES);
  }
}


int DoOneRun(void){
  int generations = 1;
  int perfectGeneration = FALSE;

  InitializeOrganisms();

  while(TRUE){
    perfectGeneration = EvaluateOrganisms();
    if( perfectGeneration==TRUE ) return generations;
    ProduceNextGeneration();
    ++generations;
  }
}
  
