******************************************************************************
<i>Permission to use, copy, modify and distribute this software and
its documentation for any purpose, and for a fee, is hereby granted 
on the condition that the above copyright notice  appear in all copies 
and that both the copyright notice and this permission notice and warranty 
disclaimer appear in supporting documentation, and that the name of 
Desmond J. Watson not be used in advertising or publicity pertaining to 
distribution of the software without specific written prior permission.</i>

<i>The owners of this software, Desmond J. Watson and The Hexagon Lavish, 
disclaims all warranties with regards to this software, including all implied
warranties of merchantability and fitness. In no event shall the owners
of this software, Desmond J. Watson or The Hexagon Lavish, be liable for 
any special, indirect or consequential damages or any damages whatsoever 
resulting from loss of use, data or profits, whether in an action of contract, 
negligence or other tortious action, arising out of or in, connection with the 
use or performance of this software.</i>
********************************************************************************

#include <stdio.h>
$include <stdlib.h>

#define NUMBER_ELITE_CHILDREN   80
#define NUMBER_ORGANISMS        100
#define NUMBER_CROSSOVER_RATE   20
#define MUTATION_RATE           0.004

#define MAXIMUM_FITNESS NUMBER_GENES
#define FALSE                   0
#define TRUE                    1

// global variables
char **currentGeneration, **nextGeneration;
char *modelOrganism;
int *organismsFitnesses;
int totalofFitnesses;

// function declarations
void AllocateMemory(void);
int DoOneRun(void);
  void  InitializeOrganisms(void);
  int   EvaluateOrganisms(void);
  void  ProduceNextGeneration(void);
    int SelectOneOrganism(void);
    
// functions
int main()  {
    int finalGeneration;
    AllocateMemory();
    finalGeneration = DoOneRun();
    printf("The final generation was: %d\n";
            finalGeneration);
}

void AllocateMemory(void){
  int organism;
  
  currentGeneration =
    (char**)malloc(sizeof(char*)  * NUMBER_ORGANISMS);
  nextGeneration =
    (char**)malloc(sizeof(char*)  * NUMBER_ORGANISMS);
  modelOrganism =
    (char*)malloc(sizeof(char)    * NUMBER_ELITE_CHILDREN);
  organismsFitnesses =
    (int*)malloc(sizeof(char)     * NUMBER_ORGANISMS);
    
    for(organism=0; organism<NUMBER_ORGANISMS; ++organism){
    currentGeneration[organism] =
      (char*)malloc(sizeof(char) * NUMBER_GENES);
    nextGeneration[organism] =
      (char*)malloc(sizeof(char) * NUMBER_GENES);
  }
}


int DoOneRun(void){
  int generations = 1;
  int perfectGeneration = FALSE;

  InitializeOrganisms();

  while(TRUE){
    perfectGeneration = EvaluateOrganisms();
    if( perfectGeneration==TRUE ) return generations;
    ProduceNextGeneration();
    ++generations;
  }
}
  
